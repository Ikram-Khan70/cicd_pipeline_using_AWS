name: EC2 Hosting and Grafana Dashboard

on:
  workflow_dispatch:

env:
  REGION: us-east-1
  AMI_ID: ami-051f8a213df8bc089  # Amazon Linux 2 AMI in us-east-1
  INSTANCE_TYPE: t2.micro
  SECURITY_GROUP: web-sg
  KEY_NAME: sdgra               # Replace with your key pair name

jobs:
  job1_create_ec2:
    name: Create EC2 with httpd
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Create EC2 with User Data
        run: |
          cat <<EOF > install_httpd.sh
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>EC2 Web Server with HTTPD (bootstrapped)</h1>" > /var/www/html/index.html
          EOF

          cat <<EOF > create_ec2.sh
          #!/bin/bash
          set -e
          aws ec2 create-security-group \
            --group-name $SECURITY_GROUP \
            --description "Allow SSH and HTTP" \
            --region $REGION || true

          aws ec2 authorize-security-group-ingress \
            --group-name $SECURITY_GROUP \
            --protocol tcp --port 22 --cidr 0.0.0.0/0 \
            --region $REGION || true

          aws ec2 authorize-security-group-ingress \
            --group-name $SECURITY_GROUP \
            --protocol tcp --port 80 --cidr 0.0.0.0/0 \
            --region $REGION || true

          INSTANCE_ID=\$(aws ec2 run-instances \
            --image-id $AMI_ID \
            --instance-type $INSTANCE_TYPE \
            --key-name $KEY_NAME \
            --security-groups $SECURITY_GROUP \
            --region $REGION \
            --user-data file://install_httpd.sh \
            --query "Instances[0].InstanceId" \
            --output text)

          echo "Waiting for EC2 instance to be ready..."
          aws ec2 wait instance-running --instance-ids \$INSTANCE_ID --region $REGION

          PUBLIC_IP=\$(aws ec2 describe-instances \
            --instance-ids \$INSTANCE_ID \
            --region $REGION \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)

          echo "EC2_PUBLIC_IP=\$PUBLIC_IP" >> $GITHUB_ENV
          echo "EC2_INSTANCE_ID=\$INSTANCE_ID" >> $GITHUB_ENV
        shell: bash

  job2_push_files:
    name: Upload HTML to EC2 and restart Apache
    needs: job1_create_ec2
    runs-on: ubuntu-latest
    steps:
      - name: Create index.html file
        run: |
          mkdir -p output
          echo "<h1>Hello from GitHub Actions ðŸš€</h1>" > output/index.html

      - name: Wait for EC2 SSH to be ready
        run: |
          for i in {1..20}; do
            if nc -z $EC2_PUBLIC_IP 22; then echo "EC2 is reachable"; break; fi
            echo "Waiting for SSH..."; sleep 10;
          done

      - name: Copy index.html to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "output/index.html"
          target: "/tmp/"
          port: 22

      - name: Move to /var/www/html and restart httpd
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo mv /tmp/index.html /var/www/html/index.html
            sudo systemctl restart httpd
            echo "âœ… Site is now live at: http://$EC2_PUBLIC_IP"

  job3_grafana_import:
    name: Import Dashboard to Grafana
    needs: job2_push_files
    runs-on: ubuntu-latest
    steps:
      - name: Import Grafana Dashboard
        run: |
          DASHBOARD_UID="3111" # Replace with your desired UID or dashboard template ID
          GRAFANA_URL="https://mrmik7760.grafana.net" # Replace with your Grafana URL

          DASHBOARD_JSON=$(curl -s "$GRAFANA_URL/api/dashboards/uid/$DASHBOARD_UID" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}")

          DASHBOARD=$(echo "$DASHBOARD_JSON" | jq '.dashboard')

          echo "$DASHBOARD" | jq '.title = "EC2 Apache Dashboard"' > dashboard.json

          curl -X POST "$GRAFANA_URL/api/dashboards/db" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -d @- <<EOF
          {
            "dashboard": $(cat dashboard.json),
            "overwrite": true,
            "folderId": 0
          }
          EOF
